{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Blake McCullough For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#blake-mccullough","text":"For full documentation visit mkdocs.org .","title":"Blake McCullough"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"arrays/","text":"Arrays What are arrays? Arrays are containers which are able to store more than one item at a time, but must have all be of the same type. How to use: from array import * #how you would create an array variable_name = array(typecode,[elements]) variable_name is the name of the variable to store data. typecode is the kind of element, e.g. integer, float etc. elements is the data to be stored (Seperated by , )","title":"Arrays"},{"location":"arrays/#arrays","text":"","title":"Arrays"},{"location":"arrays/#what-are-arrays","text":"Arrays are containers which are able to store more than one item at a time, but must have all be of the same type.","title":"What are arrays?"},{"location":"arrays/#how-to-use","text":"from array import * #how you would create an array variable_name = array(typecode,[elements]) variable_name is the name of the variable to store data. typecode is the kind of element, e.g. integer, float etc. elements is the data to be stored (Seperated by , )","title":"How to use:"},{"location":"graphs/","text":"Graphs What are graphs? A graph is a pictorial representation of a set of objects where some pairs of objects are connected by links. How to use: # importing the required module import matplotlib.pyplot as plt # x axis values x = [1,2,3] # corresponding y axis values y = [2,4,1] # plotting the points plt.plot(x, y) # naming the x axis plt.xlabel('x - axis') # naming the y axis plt.ylabel('y - axis') # giving a title to my graph plt.title('My first graph!') # function to show the plot plt.show() Note: Must have matplotlib installed.","title":"Graphs"},{"location":"graphs/#graphs","text":"","title":"Graphs"},{"location":"graphs/#what-are-graphs","text":"A graph is a pictorial representation of a set of objects where some pairs of objects are connected by links.","title":"What are graphs?"},{"location":"graphs/#how-to-use","text":"# importing the required module import matplotlib.pyplot as plt # x axis values x = [1,2,3] # corresponding y axis values y = [2,4,1] # plotting the points plt.plot(x, y) # naming the x axis plt.xlabel('x - axis') # naming the y axis plt.ylabel('y - axis') # giving a title to my graph plt.title('My first graph!') # function to show the plot plt.show() Note: Must have matplotlib installed.","title":"How to use:"},{"location":"hash_tables/","text":"Hast Tables What are hast tables? A hash table is a data structure which stores data by using a pair of values and keys, to create an index where an element is to be search from or needs to be inserted. How to use: glossary = {\"BDFL\": \"Benevolent Dictator For Life\"} #Setup. glossary[\"GIL\"] = \"Global Interpreter Lock\" # Add. glossary[\"BDFL\"] = \"Guido van Rossum\" # Update. del glossary[\"GIL\"] # Delete. glossary[\"BDFL\"] # Search. glossary [] Can be used to add a new key-value pair to the dictionary.","title":"Hash Tables"},{"location":"hash_tables/#hast-tables","text":"","title":"Hast Tables"},{"location":"hash_tables/#what-are-hast-tables","text":"A hash table is a data structure which stores data by using a pair of values and keys, to create an index where an element is to be search from or needs to be inserted.","title":"What are hast tables?"},{"location":"hash_tables/#how-to-use","text":"glossary = {\"BDFL\": \"Benevolent Dictator For Life\"} #Setup. glossary[\"GIL\"] = \"Global Interpreter Lock\" # Add. glossary[\"BDFL\"] = \"Guido van Rossum\" # Update. del glossary[\"GIL\"] # Delete. glossary[\"BDFL\"] # Search. glossary [] Can be used to add a new key-value pair to the dictionary.","title":"How to use:"},{"location":"linked_lists/","text":"Linked Lists What are linked lists? A linked list is a sequence of data elements which are connected together by links (Each elements contains a connection to another in the form of a pointer.) How to use: class Node: def __init__(self, dataval=None): self.dataval = dataval self.nextval = None class SLinkedList: def __init__(self): self.headval = None list1 = SLinkedList() list1.headval = Node(\"Mon\") e2 = Node(\"Tue\") e3 = Node(\"Wed\") # Link first Node to second node list1.headval.nextval = e2 # Link second Node to third node e2.nextval = e3","title":"Linked Lists"},{"location":"linked_lists/#linked-lists","text":"","title":"Linked Lists"},{"location":"linked_lists/#what-are-linked-lists","text":"A linked list is a sequence of data elements which are connected together by links (Each elements contains a connection to another in the form of a pointer.)","title":"What are linked lists?"},{"location":"linked_lists/#how-to-use","text":"class Node: def __init__(self, dataval=None): self.dataval = dataval self.nextval = None class SLinkedList: def __init__(self): self.headval = None list1 = SLinkedList() list1.headval = Node(\"Mon\") e2 = Node(\"Tue\") e3 = Node(\"Wed\") # Link first Node to second node list1.headval.nextval = e2 # Link second Node to third node e2.nextval = e3","title":"How to use:"},{"location":"lists/","text":"Lists What are Lists? Lists are used to store multiple items in a single variable. Items are ordered, changeable and allow duplicate values. Items in a list are accessed with an index number, e.g. first item is accessed with [0] How to use: thislist = [\"apple\", \"banana\", \"cherry\"] print(thislist)","title":"Lists"},{"location":"lists/#lists","text":"","title":"Lists"},{"location":"lists/#what-are-lists","text":"Lists are used to store multiple items in a single variable. Items are ordered, changeable and allow duplicate values. Items in a list are accessed with an index number, e.g. first item is accessed with [0]","title":"What are Lists?"},{"location":"lists/#how-to-use","text":"thislist = [\"apple\", \"banana\", \"cherry\"] print(thislist)","title":"How to use:"},{"location":"queues/","text":"Queues What are queues? Queues are a linear data structure thats stores items in a \"First in First out\" manner. How to use: # Initializing a queue queue = [] # Adding elements to the queue queue.append('a') queue.append('b') queue.append('c') print(queue) # Removing elements from the queue print(queue.pop(0)) print(queue.pop(0)) print(queue.pop(0)) print(queue)","title":"Queues"},{"location":"queues/#queues","text":"","title":"Queues"},{"location":"queues/#what-are-queues","text":"Queues are a linear data structure thats stores items in a \"First in First out\" manner.","title":"What are queues?"},{"location":"queues/#how-to-use","text":"# Initializing a queue queue = [] # Adding elements to the queue queue.append('a') queue.append('b') queue.append('c') print(queue) # Removing elements from the queue print(queue.pop(0)) print(queue.pop(0)) print(queue.pop(0)) print(queue)","title":"How to use:"},{"location":"sets/","text":"Sets What are sets? Sets are used to store multiple variables, they are unordered, unchangeable and unindexed. How to use: thisset = {\"apple\", \"banana\", \"cherry\"} print(thisset)","title":"Sets"},{"location":"sets/#sets","text":"","title":"Sets"},{"location":"sets/#what-are-sets","text":"Sets are used to store multiple variables, they are unordered, unchangeable and unindexed.","title":"What are sets?"},{"location":"sets/#how-to-use","text":"thisset = {\"apple\", \"banana\", \"cherry\"} print(thisset)","title":"How to use:"},{"location":"stack/","text":"Stack What are stack? A stack is a linear data structure that stores items in a \"Last in, first out\"/\"First in,Last out\" How to use: # creating. stack = [] # append() function to push # element in the stack stack.append('a') stack.append('b') stack.append('c') print(stack) # pop() function to pop # element from stack in # LIFO order print(stack.pop()) print(stack.pop()) print(stack.pop()) print(stack)","title":"Stack"},{"location":"stack/#stack","text":"","title":"Stack"},{"location":"stack/#what-are-stack","text":"A stack is a linear data structure that stores items in a \"Last in, first out\"/\"First in,Last out\"","title":"What are stack?"},{"location":"stack/#how-to-use","text":"# creating. stack = [] # append() function to push # element in the stack stack.append('a') stack.append('b') stack.append('c') print(stack) # pop() function to pop # element from stack in # LIFO order print(stack.pop()) print(stack.pop()) print(stack.pop()) print(stack)","title":"How to use:"},{"location":"tree/","text":"Trees What are tree? Tree is a data structure in which data items are connected using refrences in a hierarchical manner. Each \"tree\" has a root note which we can use to access each element of the \"tree\". How to use: class Node: def __init__(self, data): self.left = None self.right = None self.data = data def insert(self, data): # Compare the new value with the parent node if self.data: if data < self.data: if self.left is None: self.left = Node(data) else: self.left.insert(data) elif data > self.data: if self.right is None: self.right = Node(data) else: self.right.insert(data) else: self.data = data # Print the tree def PrintTree(self): if self.left: self.left.PrintTree() print( self.data), if self.right: self.right.PrintTree() # Use the insert method to add nodes root = Node(12) root.insert(6) root.insert(14) root.insert(3) root.PrintTree()","title":"Tree"},{"location":"tree/#trees","text":"","title":"Trees"},{"location":"tree/#what-are-tree","text":"Tree is a data structure in which data items are connected using refrences in a hierarchical manner. Each \"tree\" has a root note which we can use to access each element of the \"tree\".","title":"What are tree?"},{"location":"tree/#how-to-use","text":"class Node: def __init__(self, data): self.left = None self.right = None self.data = data def insert(self, data): # Compare the new value with the parent node if self.data: if data < self.data: if self.left is None: self.left = Node(data) else: self.left.insert(data) elif data > self.data: if self.right is None: self.right = Node(data) else: self.right.insert(data) else: self.data = data # Print the tree def PrintTree(self): if self.left: self.left.PrintTree() print( self.data), if self.right: self.right.PrintTree() # Use the insert method to add nodes root = Node(12) root.insert(6) root.insert(14) root.insert(3) root.PrintTree()","title":"How to use:"}]}